import com.adarshr.gradle.testlogger.theme.ThemeType
import com.github.spotbugs.snom.Confidence
import com.github.spotbugs.snom.Effort
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.kotlin.dsl.internal.sharedruntime.codegen.licenseHeader

/*
 * This file was generated by the Gradle 'init' task.
 */

val codeCoverageToolVersion = "0.8.11"
val codeCoverageReports = "reports/codeCoverage"
val codeCoverageThreshold = "0.50".toBigDecimal()

plugins {
    // Apply the java Plugin to add support for Java.
    java

    // Code coverage
    jacoco

    // Formatting
    id("com.diffplug.spotless")

    // SpotBugs
    id("com.github.spotbugs")

    // Test logger
    id("com.adarshr.test-logger")
}

jacoco {
    toolVersion = codeCoverageToolVersion
    reportsDirectory = layout.buildDirectory.dir(codeCoverageReports)
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat()
        formatAnnotations()
        licenseHeaderFile("${rootDir}/gradle/licenseHeader")
    }
}

spotbugs {
    ignoreFailures = true
    showStackTraces = true
    showProgress = true
    excludeFilter = file("spotbugs-exclude.xml")
    effort = Effort.MAX
    reportLevel = Confidence.LOW
}

testlogger {
    theme = ThemeType.MOCHA
    showExceptions = true
    showStackTraces = true
    showFullStackTraces = false
    showCauses = true
    slowThreshold = 2000 // everything over two seconds is considered slow
    showSummary = true
    showSimpleNames = false
    showPassed = true
    showSkipped = true
    showFailed = true
    showOnlySlow = false
    showStandardStreams = false
    showPassedStandardStreams = true
    showSkippedStandardStreams = true
    showFailedStandardStreams = true
}


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

tasks.withType<JavaCompile>().configureEach {
    options.compilerArgs.add("-Werror") // treat warnings as errors
    options.compilerArgs.add("-Xlint:all")
    options.compilerArgs.add("-Xlint:-serial") // we do not use Java serialization at all, reduce noise
    options.compilerArgs.add("-Xlint:-classfile") // TODO: log4j dependency triggers this. Fix this when we remove it
    options.isDeprecation = true
}


tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    testLogging {
        showExceptions = true
        showStackTraces = true
        exceptionFormat = TestExceptionFormat.FULL
        showCauses = true
        events("skipped", "failed")
    }
}

tasks.test {
    // Report is generated and verification is run after tests
    finalizedBy(tasks.jacocoTestReport, tasks.jacocoTestCoverageVerification)
}

tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = codeCoverageThreshold
            }
        }
    }
}

tasks.jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
    }

    dependsOn(tasks.test) // tests are required to run before generating the report
}

tasks.spotbugsMain {
    reports.create("html") {
        required = true
        setStylesheet("fancy-hist.xsl")
    }
}

tasks.spotbugsTest {
    reports.create("html") {
        required = true
        setStylesheet("fancy-hist.xsl")
    }
}